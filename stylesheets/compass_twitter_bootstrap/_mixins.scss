//
// Mixins
// --------------------------------------------------


// Utilities
// -------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
@mixin ctb-clear_float() {
  &:before,
  &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }
  &:after {
    clear: both;
  }
}

// Webkit-style focus
@mixin ctb-tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Center-align a block level element
@mixin ctb-center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Sizing shortcuts
@mixin ctb-size($width, $height) {
  width: $width;
  height: $height;
}
@mixin ctb-square($size) {
  @include ctb-size($size, $size);
}

// Placeholder text
@mixin ctb-placeholder($color: $input-color-placeholder) {
  &:-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}

// Text overflow
// Requires inline-block or block for proper styling
@mixin ctb-text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// CSS image replacement
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
@mixin ctb-hide-text() {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}


// FONTS
// --------------------------------------------------

#font {
  #family {
    @include ctb-serif()
      font-family: $font-family-serif;
    }
    @include ctb-sans-serif()
      font-family: $font-family-sans-serif;
    }
    @include ctb-monospace()
      font-family: $font-family-monospace;
    }
  }
  @include ctb-shorthand($size: $font-size-base, $weight: normal, $lineHeight: $line-height-base)
    font-size: $size;
    font-weight: $weight;
    line-height: $lineHeight;
  }
  @include ctb-serif($size: $font-size-base, $weight: normal, $lineHeight: $line-height-base)
    #font > #family > .serif;
    #font > @include ctb-shorthand($size, $weight, $lineHeight);
  }
  @include ctb-sans-serif($size: $font-size-base, $weight: normal, $lineHeight: $line-height-base)
    #font > #family > .sans-serif;
    #font > @include ctb-shorthand($size, $weight, $lineHeight);
  }
  @include ctb-monospace($size: $font-size-base, $weight: normal, $lineHeight: $line-height-base)
    #font > #family > .monospace;
    #font > @include ctb-shorthand($size, $weight, $lineHeight);
  }
}


// FORMS
// --------------------------------------------------

@mixin ctb-formFieldState($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {
  // Color the label text
  .control-label {
    color: $text-color;
  }
  // Set the border and box shadow on specific inputs to match
  .input-with-feedback {
    padding-right: 32px; // to account for the feedback icon
    border-color: $border-color;
    @include ctb-box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    &:focus {
      border-color: darken($border-color, 10%);
      $shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 20%);
      @include ctb-box-shadow($shadow);
    }
  }
}



// CSS3 PROPERTIES
// --------------------------------------------------

// Single side border-radius
@mixin ctb-border-top-radius($radius) {
  border-top-right-radius: $radius;
   border-top-left-radius: $radius;
}
@mixin ctb-border-right-radius($radius) {
  border-bottom-right-radius: $radius;
     border-top-right-radius: $radius;
}
@mixin ctb-border-bottom-radius($radius) {
  border-bottom-right-radius: $radius;
   border-bottom-left-radius: $radius;
}
@mixin ctb-border-left-radius($radius) {
  border-bottom-left-radius: $radius;
     border-top-left-radius: $radius;
}

// Drop shadows
@mixin ctb-box-shadow($shadow) {
  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
          box-shadow: $shadow;
}

// Transitions
@mixin ctb-transition($transition) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
       -o-transition: $transition;
          transition: $transition;
}
@mixin ctb-transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
     -moz-transition-delay: $transition-delay;
       -o-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}

// Transformations
@mixin ctb-rotate($degrees) {
  -webkit-transform: rotate($degrees);
     -moz-transform: rotate($degrees);
      -ms-transform: rotate($degrees);
       -o-transform: rotate($degrees);
          transform: rotate($degrees);
}
@mixin ctb-scale($ratio) {
  -webkit-transform: scale($ratio);
     -moz-transform: scale($ratio);
      -ms-transform: scale($ratio);
       -o-transform: scale($ratio);
          transform: scale($ratio);
}
@mixin ctb-translate($x, $y) {
  -webkit-transform: translate($x, $y);
     -moz-transform: translate($x, $y);
      -ms-transform: translate($x, $y);
       -o-transform: translate($x, $y);
          transform: translate($x, $y);
}
@mixin ctb-skew($x, $y) {
  -webkit-transform: skew($x, $y);
     -moz-transform: skew($x, $y);
      -ms-transform: skewX($x) skewY($y); // See https://github.com/twitter/bootstrap/issues/4885
       -o-transform: skew($x, $y);
          transform: skew($x, $y);
  -webkit-backface-visibility: hidden; // See https://github.com/twitter/bootstrap/issues/5319
}
@mixin ctb-translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
     -moz-transform: translate3d($x, $y, $z);
       -o-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden
// See git pull https://github.com/dannykeane/bootstrap.git backface-visibility for examples
@mixin ctb-backface-visibility($visibility){
	-webkit-backface-visibility: $visibility;
	   -moz-backface-visibility: $visibility;
	        backface-visibility: $visibility;
}

// Background clipping
@mixin ctb-background-clip($clip) {
  -webkit-background-clip: $clip;
     -moz-background-clip: $clip;
          background-clip: $clip;
}

// Background sizing
@mixin ctb-background-size($size) {
  -webkit-background-size: $size;
     -moz-background-size: $size;
       -o-background-size: $size;
          background-size: $size;
}

// Box sizing
@mixin ctb-box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

// User select
// For selecting text on the page
@mixin ctb-user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select;
       -o-user-select: $select;
          user-select: $select;
}

// Resize anything
@mixin ctb-resizable($direction) {
  resize: $direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}

// CSS3 Content Columns
@mixin ctb-content-columns($column-count, $column-gap: $grid-gutter-width) {
  -webkit-column-count: $column-count;
     -moz-column-count: $column-count;
          column-count: $column-count;
  -webkit-column-gap: $column-gap;
     -moz-column-gap: $column-gap;
          column-gap: $column-gap;
}

// Optional hyphenation
@mixin ctb-hyphens($mode: auto) {
  word-wrap: break-word;
  -webkit-hyphens: $mode;
     -moz-hyphens: $mode;
      -ms-hyphens: $mode;
       -o-hyphens: $mode;
          hyphens: $mode;
}

// Opacity
@mixin ctb-opacity($opacity) {
  opacity: $opacity / 100;
  filter: ~"alpha(opacity=${opacity})"; // IE8
}



// BACKGROUNDS
// --------------------------------------------------

// Gradients
#gradient {
  @include ctb-horizontal($startColor: #555, $endColor: #333)
    background-color: $endColor;
    background-image: -moz-linear-gradient(left, $startColor, $endColor); // FF 3.6+
    background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
    background-image: -webkit-linear-gradient(left, $startColor, $endColor); // Safari 5.1+, Chrome 10+
    background-image: -o-linear-gradient(left, $startColor, $endColor); // Opera 11.10
    background-image: linear-gradient(to right, $startColor, $endColor); // Standard, IE10
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft@include ctb-gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb($startColor),argb($endColor))); // IE9 and down
  }
  @include ctb-vertical($startColor: #555, $endColor: #333)
    background-color: $endColor;
    background-image: -moz-linear-gradient(top, $startColor, $endColor); // FF 3.6+
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
    background-image: -webkit-linear-gradient(top, $startColor, $endColor); // Safari 5.1+, Chrome 10+
    background-image: -o-linear-gradient(top, $startColor, $endColor); // Opera 11.10
    background-image: linear-gradient(to bottom, $startColor, $endColor); // Standard, IE10
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft@include ctb-gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb($startColor),argb($endColor))); // IE9 and down
  }
  @include ctb-directional($startColor: #555, $endColor: #333, $deg: 45deg)
    background-color: $endColor;
    background-repeat: repeat-x;
    background-image: -moz-linear-gradient($deg, $startColor, $endColor); // FF 3.6+
    background-image: -webkit-linear-gradient($deg, $startColor, $endColor); // Safari 5.1+, Chrome 10+
    background-image: -o-linear-gradient($deg, $startColor, $endColor); // Opera 11.10
    background-image: linear-gradient($deg, $startColor, $endColor); // Standard, IE10
  }
  @include ctb-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f)
    background-color: mix($midColor, $endColor, 80%);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
    background-image: -webkit-linear-gradient($startColor, $midColor $colorStop, $endColor);
    background-image: -moz-linear-gradient(top, $startColor, $midColor $colorStop, $endColor);
    background-image: -o-linear-gradient($startColor, $midColor $colorStop, $endColor);
    background-image: linear-gradient($startColor, $midColor $colorStop, $endColor);
    background-repeat: no-repeat;
    filter: e(%("progid:DXImageTransform.Microsoft@include ctb-gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb($startColor),argb($endColor))); // IE9 and down, gets no color-stop at all for proper fallback
  }
  @include ctb-radial($innerColor: #555, $outerColor: #333)
    background-color: $outerColor;
    background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
    background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
    background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
    background-image: -o-radial-gradient(circle, $innerColor, $outerColor);
    background-repeat: no-repeat;
  }
  @include ctb-striped($color: #555, $angle: 45deg)
    background-color: $color;
    background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
    background-image: -webkit-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-image: -moz-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-image: -o-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-image: linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  }
}
// Reset filters for IE
@mixin ctb-reset-filter() {
  filter: e(%("progid:DXImageTransform.Microsoft@include ctb-gradient(enabled = false)"));
}



// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
@mixin ctb-nav-divider($top: #e5e5e5, $bottom: #fff) {
  height: 1px;
  margin: (($line-height-base / 2) - 1) 1px; // 8px 1px
  overflow: hidden;
  background-color: $top;
  border-bottom: 1px solid $bottom;
}

// Button backgrounds
// ------------------
@mixin ctb-buttonBackground($background-start, $background-end, $text-color: #fff, $text-shadow: 0 -1px 0 rgba(0,0,0,.25)) {
  color: $text-color;
  text-shadow: $text-shadow;
  #gradient > @include ctb-vertical($background-start, $background-end);
  border-color: darken($background-end, 7.5%);

  &:hover,
  &:active,
  &.active {
    color: $text-color;
    background-color: $background-end;
    background-position: 0 -15px;
  }
  &:active,
  &.active,
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    background-image: none;
  }
}


// Navbar vertical align
// -------------------------
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `@include ctb-navbarVerticalAlign(30px);` to calculate the appropriate top margin.
@mixin ctb-navbarVerticalAlign($element-height) {
  margin-top: ($navbar-height - $element-height) / 2;
}



// Grid System
// -----------

// Centered container element
@mixin ctb-container-fixed() {
  margin-right: auto;
  margin-left: auto;
  @include ctb-clearfix();
}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
@mixin ctb-makeRow() {
  margin-left: $grid-gutter-width * -1;
  @include ctb-clearfix();
}
@mixin ctb-makeColumn($columns: 1, $offset: 0) {
  float: left;
  margin-left: ($grid-column-width * $offset) + ($grid-gutter-width * ($offset - 1)) + ($grid-gutter-width * 2);
  width: ($grid-column-width * $columns) + ($grid-gutter-width * ($columns - 1));
}

// The Grid
#grid {

  @include ctb-core($grid-column-width, $grid-gutter-width, $grid-row-width)

    @include ctb-spanX($index) when ($index > 0)
      (~".span${index}") { @include ctb-span($index); }
      @include ctb-spanX($index - 1);
    }
    @include ctb-spanX(0)}

    @include ctb-offsetX($index) when ($index > 0)
      (~".offset${index}") { @include ctb-offset($index); }
      @include ctb-offsetX($index - 1);
    }
    @include ctb-offsetX(0)}


    // Base styles
    @include ctb-offset($columns)
      margin-left: percentage($columns / $grid-columns);
    }
    @include ctb-span($columns)
      width: percentage($columns / $grid-columns);
    }

    .row {
      // Negative indent the columns so text lines up
      margin-left: $grid-gutter-width / -2;
      margin-right: $grid-gutter-width / -2;
      // Clear the floated columns
      @include ctb-clearfix();
    }

    [class*="span"] {
      float: left; // Collapse whitespace
      min-height: 1px; // Prevent empty columns from collapsing
      padding-left: $grid-gutter-width / 2;
      padding-right: $grid-gutter-width / 2;
      // Proper box-model (padding doesnt' add to width)
      -webkit-box-sizing: border-box;
         -moz-box-sizing: border-box;
              box-sizing: border-box;
    }

    // Generate .spanX and .offsetX
    @include ctb-spanX($grid-columns);
    @include ctb-offsetX($grid-columns);

  }


  @include ctb-input($grid-column-width, $grid-gutter-width, $grid-row-width)

    @include ctb-spanX($index) when ($index > 0)
      (~"input.span${index}, textarea.span${index}, select.span${index}, .uneditable-input.span${index}") { @include ctb-span($index); }
      @include ctb-spanX($index - 1);
    }
    @include ctb-spanX(0)}

    @include ctb-offsetX($index) when ($index > 0)
      (~"input.offset${index}, textarea.offset${index}, select.offset${index}, uneditable-input.offset${index}") { @include ctb-offset($index); }
      @include ctb-offsetX($index - 1);
    }
    @include ctb-offsetX(0)}

    @include ctb-span($columns)
      // TODO: Figure out how to add this back behind a class
      // Part 1: Since inputs require padding *and* margin, we subtract the grid gutter width, as a percent of the row, from the default column width.
      //width: percentage($columns / $grid-columns) - percentage($grid-gutter-width / $grid-row-width);
      // Part 2: That subtracted width then gets split in half and added to the left and right margins.
      // margin-left: percentage(($grid-gutter-width / 2) / $grid-row-width);
      // margin-right: percentage(($grid-gutter-width / 2) / $grid-row-width);
    }

    @include ctb-offset($columns)
      // Take the normal offset margin and add an extra gutter's worth.
      margin-left: percentage($columns / $grid-columns) + percentage(($grid-gutter-width / 2) / $grid-row-width);
    }

    // Generate .spanX and .offsetX
    @include ctb-spanX($grid-columns);
    @include ctb-offsetX($grid-columns);

  }


}
